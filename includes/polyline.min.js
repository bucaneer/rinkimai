/**
 * Based off of [the offical Google document](https://developers.google.com/maps/documentation/utilities/polylinealgorithm)
 *
 * Some parts from [this implementation](http://facstaff.unca.edu/mcmcclur/GoogleMaps/EncodePolyline/PolylineEncoder.js)
 * by [Mark McClure](http://facstaff.unca.edu/mcmcclur/)
 * 
 * https://github.com/mapbox/polyline
 *
 * @module polyline
 */
var r={};function e(r){return Math.floor(Math.abs(r)+.5)*(r>=0?1:-1)}function n(r,n,t){var o=2*((r=e(r*t))-(n=e(n*t)));o<0&&(o=-o-1);for(var i="";o>=32;)i+=String.fromCharCode(63+(32|31&o)),o/=32;return i+=String.fromCharCode(63+(0|o))}function t(r){for(var e=[],n=0;n<r.length;n++){var t=r[n].slice();e.push([t[1],t[0]])}return e}r.decode=function(r,e){for(var n,t=0,o=0,i=0,u=[],a=0,f=0,h=null,c=Math.pow(10,Number.isInteger(e)?e:5);t<r.length;){h=null,a=1,f=0;do{f+=(31&(h=r.charCodeAt(t++)-63))*a,a*=32}while(h>=32);n=1&f?(-f-1)/2:f/2,a=1,f=0;do{f+=(31&(h=r.charCodeAt(t++)-63))*a,a*=32}while(h>=32);o+=n,i+=1&f?(-f-1)/2:f/2,u.push([o/c,i/c])}return u},r.encode=function(r,e){if(!r.length)return"";for(var t=Math.pow(10,Number.isInteger(e)?e:5),o=n(r[0][0],0,t)+n(r[0][1],0,t),i=1;i<r.length;i++){var u=r[i],a=r[i-1];o+=n(u[0],a[0],t),o+=n(u[1],a[1],t)}return o},r.fromGeoJSON=function(e,n){if(e&&"Feature"===e.type&&(e=e.geometry),!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return r.encode(t(e.coordinates),n)},r.toGeoJSON=function(e,n){return{type:"LineString",coordinates:t(r.decode(e,n))}};export{r as polyline};
